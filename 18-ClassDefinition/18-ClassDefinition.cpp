/*
类的定义
通常，我们将接口放在头文件.h中，将实现放在源代码文件.cpp中
类的基本思想是数据抽象和封装
抽象：对具体对象或问题进行概括，抽出这一类对象的公共性质并加以描述的过程
类声明：以成员数据的方式描述数据部分，以成员函数的方式描述公有接口
类方法定义：描述如何实现类成员函数
类的接口：包括用户所能执行的操作
类的实现：包括类的数据成员、负责接口实现的函数体以及定义所需要的各种私有函数
封装：将抽出的数据成员、行为成员相结合，将他们视为一个整体——类
封装实现了类的接口和实现的分离，封装后的类隐藏了它的实现细节，也就是说，类的用户只能使用接口而无法访问实现部分
公共成员函数是程序和对象的私有成员之间的桥梁，提供了对象和程序之间的接口，同时私有成员防止了程序直接访问数据

类的作用域
每个类都会定义自己的作用域，在类的作用域之外，普通的数据和函数成员只能由对象、引用或者指针使用成员访问运算符来访问
对象调用:直接成员运算符(.)
指针调用:简介成员运算符(->)
在类的外部定义成员函数时，必须同时提供类名和函数名
解析运算符（::）

作用域为类的常量
想要获得作用域为类的常量，有两种方式：
1.在类中声明一个枚举类型，在类声明中声明的枚举的作用域为整个类，因此可以用枚举为整型常量提供作用域为整个类的符号名称
用这种方式声明枚举并不会创建类数据成员，只是为了创建符号常量。
一般情况下会使用第二种方式☆2.使用static关键字，使用static关键字创建的常量将与其他静态变量存储在一起，而不是存储在对象中

友元函数
类可以允许其他类或者函数访问它的非公有成员，方法是令其他类或者函数成为它的友元(friend)
如果类想把一个函数作为它的友元，只需要增加一条以friend关键字开始的函数声明语句即可
friend void printMath(Student &s);
*/
#include "Student.h"
int main()
{
	//类的声明和使用
	//通过构造函数初始化对象
	Student stu1=Student("Dzy",100,120,110);
	int totalScore1 = stu1.sum(stu1);
	float avery1 = stu1.avery(stu1);
	bool isPassed1 = stu1.pass(stu1);
	//友元函数
	printMath(stu1);
	cout << stu1.getName(stu1) << "的总成绩：" << totalScore1 << endl;
	cout << stu1.getName(stu1) << "的平均成绩：" << avery1 << endl;
	if (isPassed1)
	{
		cout << stu1.getName(stu1) << "通过考试" << endl;
	}
	else
	{
		cout << stu1.getName(stu1) << "没有通过考试" << endl;
	}


}

